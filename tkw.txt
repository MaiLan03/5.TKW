Welcome to Flexbox Froggy, a game where you help Froggy and friends by writing CSS code! Guide this frog to the lilypad on the right by using the justify-content property, which aligns items horizontally and accepts the following values:
flex-start: Items align to the left side of the container.
flex-end: Items align to the right side of the container.
center: Items align at the center of the container.
space-between: Items display with equal spacing between them.
space-around: Items display with equal spacing around them.
For example, justify-content: flex-end; will move the frog to the right. 
—
Now use align-items to help the frogs get to the bottom of the pond. This CSS property aligns items vertically and accepts the following values:
flex-start: Items align to the top of the container.
flex-end: Items align to the bottom of the container.
center: Items align at the vertical center of the container.
baseline: Items display at the baseline of the container.
stretch: Items are stretched to fit the container.
—
The frogs need to get in the same order as their lilypads using flex-direction. This CSS property defines the direction items are placed in the container, and accepts the following values:
row: Items are placed the same as the text direction.
row-reverse: Items are placed opposite to the text direction.
column: Items are placed top to bottom.
column-reverse: Items are placed bottom to top.
—
Sometimes reversing the row or column order of a container is not enough. In these cases, we can apply the order property to individual items. By default, items have a value of 0, but we can use this property to also set it to a positive or negative integer value (-2, -1, 0, 1, 2).
Use the order property to reorder the frogs according to their lilypads.
—
Another property you can apply to individual items is align-self. This property accepts the same values as align-items and its value for the specific item.
—
Oh no! The frogs are all squeezed onto a single row of lilypads. Spread them out using the flex-wrap property, which accepts the following values:
nowrap: Every item is fit to a single line.
wrap: Items wrap around to additional lines.
wrap-reverse: Items wrap around to additional lines in reverse.
—
Help this army of frogs form three orderly columns using a combination of flex-direction and flex-wrap.
—
The two properties flex-direction and flex-wrap are used so often together that the shorthand property flex-flow was created to combine them. This shorthand property accepts the value of the two properties separated by a space.
For example, you can use flex-flow: row wrap to set rows and wrap them.
Try using flex-flow to repeat the previous level.
—
The frogs are spread all over the pond, but the lilypads are bunched at the top. You can use align-content to set how multiple lines are spaced apart from each other. This property takes the following values:
flex-start: Lines are packed at the top of the container.
flex-end: Lines are packed at the bottom of the container.
center: Lines are packed at the vertical center of the container.
space-between: Lines display with equal spacing between them.
space-around: Lines display with equal spacing around them.
stretch: Lines are stretched to fit the container.
This can be confusing, but align-content determines the spacing between lines, while align-items determines how the items as a whole are aligned within the container. When there is only one line, align-content has no effect.
—
-------------------

Chào mừng bạn đến với Flexbox Froggy, một trò chơi nơi bạn giúp đỡ Froggy và bạn bè bằng cách viết mã CSS! Hướng dẫn chú ếch này tới hình hoa huệ ở bên phải bằng cách sử dụng thuộc tính justify-content, căn chỉnh các mục theo chiều ngang và chấp nhận các giá trị sau:
flex-start: Các mục được căn chỉnh về phía bên trái của vùng chứa.
uốn cong-end: Các mục căn chỉnh về phía bên phải của vùng chứa.
center: Các mục được căn chỉnh ở giữa vùng chứa.
space-between: Các mục hiển thị với khoảng cách bằng nhau giữa chúng.
space-around: Các mục hiển thị với khoảng cách bằng nhau xung quanh chúng.
Ví dụ: justify-content: flex-end; sẽ di chuyển con ếch sang bên phải. 
—
Bây giờ sử dụng căn chỉnh-vật dụng giúp ếch xuống đáy ao. Thuộc tính CSS này căn chỉnh các mục theo chiều dọc và chấp nhận các giá trị sau:
flex-start: Các mục được căn chỉnh ở trên cùng của vùng chứa.
flex-end: Các mục được căn chỉnh theo đáy container.
center: Các mục được căn chỉnh ở giữa theo chiều dọc của vùng chứa.
đường cơ sở: Các mục hiển thị ở đường cơ sở của vùng chứa.
căng: Các vật phẩm được kéo dài để vừa với thùng chứa.
—
Những con ếch cần phải sắp xếp theo thứ tự giống như lá hoa súng của chúng bằng cách sử dụng phương pháp uốn cong. Thuộc tính CSS này xác định các mục hướng được đặt trong vùng chứa và chấp nhận các giá trị sau:
hàng: Các mục được đặt giống với hướng văn bản.
row-reverse: Các mục được đặt ngược với hướng của văn bản.
cột: Các mục được đặt từ trên xuống dưới.
cột-đảo ngược: Các mục được đặt từ dưới lên trên.
—
Đôi khi việc đảo ngược thứ tự hàng hoặc cột của vùng chứa là không đủ. Trong những trường hợp này, chúng ta có thể áp dụng thuộc tính order cho từng mục riêng lẻ.
Theo mặc định, các mục có giá trị là 0, nhưng chúng ta có thể sử dụng thuộc tính này để đặt nó thành giá trị nguyên dương hoặc âm (-2, -1, 0, 1, 2).
Sử dụng thuộc tính order để sắp xếp lại các con ếch theo lá hoa huệ của chúng.
—
Một thuộc tính khác mà bạn có thể áp dụng cho từng mục riêng lẻ là Align-self. Thuộc tính này chấp nhận các giá trị giống như căn chỉnh-
các mặt hàng và giá trị của nó đối với mặt hàng cụ thể.
—
Ồ không! Tất cả những con ếch đều bị ép vào một hàng lá súng. Trải chúng ra bằng cách sử dụng thuộc tính flex-wrap, chấp nhận các giá trị sau:
nowrap: Mỗi mục đều vừa với một dòng.
quấn: Các mục được bọc xung quanh các dòng bổ sung.
quấn-đảo ngược: Các mục được quấn quanh các dòng bổ sung theo chiều ngược lại.
—
Hãy giúp đội quân ếch này tạo thành ba cột có trật tự bằng cách sử dụng sự kết hợp giữa flex-direction và flex-wrap.
—
Hai thuộc tính flex-direction và flex-wrap được sử dụng thường xuyên cùng nhau đến mức thuộc tính viết tắt flex-flow được tạo ra để kết hợp chúng. Thuộc tính tốc ký này chấp nhận giá trị của hai thuộc tính cách nhau bởi dấu cách.
Ví dụ,
bạn có thể sử dụng flex-flow: rowwrap để đặt hàng và bọc chúng.
Hãy thử sử dụng flex-flow để lặp lại cấp độ trước đó.
—
Ếch rải khắp ao nhưng hoa súng lại mọc chụm lại ở phía trên. Bạn có thể sử dụng căn chỉnh nội dung để đặt khoảng cách giữa các dòng. Thuộc tính này nhận các giá trị sau:
uốn cong-
bắt đầu: Các dòng được đóng gói ở đầu container.
flex-end: Các dòng được đóng gói ở dưới cùng của container.
center: Các dây chuyền được đóng gói ở tâm dọc của container.
space-between: Các dòng hiển thị với khoảng cách bằng nhau giữa chúng.
space-around: Các dòng hiển thị với khoảng cách bằng nhau xung quanh chúng.
kéo dài: Các đường được kéo dài để vừa với vùng chứa
.
Điều này có thể gây nhầm lẫn, nhưng căn chỉnh nội dung xác định khoảng cách giữa các dòng, trong khi căn chỉnh các mục xác định cách các mục nói chung được căn chỉnh trong vùng chứa. Khi chỉ có một dòng, nội dung căn chỉnh không có hiệu lực.
—